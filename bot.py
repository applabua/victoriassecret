import logging
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    Filters,
    ConversationHandler,
    CallbackContext,
)
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# ------------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ -------------------------
TOKEN = "7633660729:AAEF7FnE9HO0jfBsJXHRTOznP0s3jiwntPs"
OWNER_ID = 204541083
CHANNEL_ID = "@your_channel"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π ID –∏–ª–∏ @username –∫–∞–Ω–∞–ª–∞
# -------------------------------------------------------------

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞–¥–∏–∏ ConversationHandler:
# 0 - –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞; 1 - –í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∏–º–µ–Ω–∏; 2 - –í–≤–æ–¥ –∞–¥—Ä–µ—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç, –æ–±–ª–∞—Å—Ç—å –∏ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –ø–æ—á—Ç—ã);
# 3 - –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.
CHOOSING_PRODUCT, WAITING_PHONE_NAME, WAITING_ADDRESS, CONFIRM_ORDER = range(4)

# –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ ‚Äì 24 –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –∏–º–µ–Ω–∞–º–∏, –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Ñ–æ—Ç–æ
products = {
    "1": {
        "name": "–ó–≤–æ–ª–æ–∂—É—é—á–∏–π –∫—Ä–µ–º Bombshell üíñ",
        "description": "üíß **Bombshell** ‚Äì –∫—Ä–µ–º, —â–æ –¥–∞—Ä—É—î –≥–ª–∏–±–æ–∫–µ –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è, –Ω—ñ–∂–Ω—É —Ç–µ–∫—Å—Ç—É—Ä—É —Ç–∞ –Ω–µ–ø–æ–≤—Ç–æ—Ä–Ω–∏–π –∞—Ä–æ–º–∞—Ç –¥–ª—è –≤–∞—à–æ—ó —à–∫—ñ—Ä–∏!",
        "image": "https://i.ibb.co/9k8BmxSN/photo-2025-04-15-16-46-14.jpg"
    },
    "2": {
        "name": "–ù—ñ–∂–Ω–∏–π –ª–æ—Å—å–π–æ–Ω Tease üå∏",
        "description": "üå∫ **Tease** ‚Äì –ª–µ–≥–∫–∏–π –ª–æ—Å—å–π–æ–Ω –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –¥–æ–≥–ª—è–¥—É, —â–æ –∑–∞–±–µ–∑–ø–µ—á—É—î —Å–≤—ñ–∂—ñ—Å—Ç—å —Ç–∞ –º‚Äô—è–∫—ñ—Å—Ç—å —à–∫—ñ—Ä–∏!",
        "image": "https://i.ibb.co/5X6nDCq4/photo-2025-04-15-16-46-15.jpg"
    },
    "3": {
        "name": "–®–æ–≤–∫–æ–≤–∏–π –∫—Ä–µ–º Seduction ‚ú®",
        "description": "üåπ **Seduction** ‚Äì –∫—Ä–µ–º —ñ–∑ –Ω–∞—Å–∏—á–µ–Ω–æ—é —Ç–µ–∫—Å—Ç—É—Ä–æ—é, —â–æ –¥–∞—Ä—É—î —à–æ–≤–∫–æ–≤—É –≥–ª–∞–¥–∫—ñ—Å—Ç—å —Ç–∞ —á–∞—Ä—É—é—á–∏–π –∞—Ä–æ–º–∞—Ç!",
        "image": "https://i.ibb.co/qYHnDZrx/photo-2025-04-15-16-46-13.jpg"
    },
    "4": {
        "name": "–ú—ñ—Å—Ç–∏—á–Ω–∏–π –∫—Ä–µ–º Dreamy Glow üíé",
        "description": "üåü **Dreamy Glow** ‚Äì –∫—Ä–µ–º, —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è —Å—è–π–≤–∞ —Ç–∞ —Ä—ñ–≤–Ω–æ–º—ñ—Ä–Ω–æ–≥–æ –≤—ñ–¥—Ç—ñ–Ω–∫—É —à–∫—ñ—Ä–∏, –ø—ñ–¥–∫—Ä–µ—Å–ª—é—é—á–∏ –≤–∞—à—É –∫—Ä–∞—Å—É!",
        "image": "https://i.ibb.co/r2wmHsqT/photo-2025-04-15-15-08-33.jpg"
    },
    "5": {
        "name": "–†–æ–∑–∫—ñ—à–Ω–∏–π –∫—Ä–µ–º Luscious Body üåü",
        "description": "üíñ **Luscious Body** ‚Äì —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω–µ –∂–∏–≤–ª–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —à–∫—ñ—Ä–∏ –¥–ª—è –≤—ñ–¥—á—É—Ç—Ç—è —Å–ø—Ä–∞–≤–∂–Ω—å–æ—ó —Ä–æ–∑–∫–æ—à—ñ!",
        "image": "https://i.ibb.co/1Y98rzQ6/photo-2025-04-15-15-08-27.jpg"
    },
    "6": {
        "name": "–õ–æ—Å—å–π–æ–Ω Velvet Touch üåº",
        "description": "üíê **Velvet Touch** ‚Äì –Ω—ñ–∂–Ω–∏–π –ª–æ—Å—å–π–æ–Ω, —â–æ –¥–∞—Ä—É—î –º‚Äô—è–∫—ñ—Å—Ç—å —Ç–∞ –∫–æ–º—Ñ–æ—Ä—Ç, –∑–∞–ª–∏—à–∞—é—á–∏ –ø—Ä–∏—î–º–Ω–∏–π –∞—Ä–æ–º–∞—Ç –Ω–∞ —à–∫—ñ—Ä—ñ!",
        "image": "https://i.ibb.co/p6rpLtys/photo-2025-04-15-15-08-22-2.jpg"
    },
    "7": {
        "name": "–ö—Ä–µ–º Charm Essence üå∫",
        "description": "üå∑ **Charm Essence** ‚Äì —É—Ç–æ–Ω—á–µ–Ω–∏–π –∫—Ä–µ–º, –Ω–∞–ø–æ–≤–Ω–µ–Ω–∏–π –∂–∏—Ç—Ç—è–º —Ç–∞ –µ–Ω–µ—Ä–≥—ñ—î—é –∑–∞–≤–¥—è–∫–∏ —Å–≤–æ—ó–π –ª–µ–≥–∫—ñ–π —Ç–µ–∫—Å—Ç—É—Ä—ñ —Ç–∞ —Å–≤—ñ–∂–æ–º—É –∞—Ä–æ–º–∞—Ç—É!",
        "image": "https://i.ibb.co/wZKsPN71/photo-2025-04-15-15-08-22.jpg"
    },
    "8": {
        "name": "–õ–æ—Å—å–π–æ–Ω Glamour Radiance üí´",
        "description": "‚ú® **Glamour Radiance** ‚Äì –ª–æ—Å—å–π–æ–Ω, —è–∫–∏–π –¥–∞—Ä—É—î —à–∫—ñ—Ä—ñ —Å—è–π–≤–æ —Ç–∞ —Ä–æ–∑–∫—ñ—à–Ω–∏–π –≤–∏–≥–ª—è–¥, –ø—ñ–¥–∫—Ä–µ—Å–ª—é—é—á–∏ –≤–∞—à—É —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ—Å—Ç—å!",
        "image": "https://i.ibb.co/HL97djJX/photo-2025-04-15-15-08-21-2.jpg"
    },
    "9": {
        "name": "–ö—Ä–µ–º Mystic Moisture üíß",
        "description": "üåπ **Mystic Moisture** ‚Äì –∫—Ä–µ–º, —â–æ –¥–∞—Ä—É—î –≥–ª–∏–±–æ–∫–µ –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è —Ç–∞ —Ä–æ–±–∏—Ç—å –≤–∞—à—É —à–∫—ñ—Ä—É –Ω–µ–π–º–æ–≤—ñ—Ä–Ω–æ –º‚Äô—è–∫–æ—é —ñ –≥–ª–∞–¥–∫–æ—é!",
        "image": "https://i.ibb.co/bRdsf7wN/photo-2025-04-15-15-08-21.jpg"
    },
    "10": {
        "name": "–ö—Ä–µ–º Delightful Dusk üåô",
        "description": "üíñ **Delightful Dusk** ‚Äì –∫—Ä–µ–º –¥–ª—è —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è, —â–æ –∑–∞–±–µ–∑–ø–µ—á—É—î –Ω—ñ–∂–Ω–∏–π –¥–æ–≥–ª—è–¥ —ñ –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω–∏–π –∞—Ä–æ–º–∞—Ç –¥–ª—è –≤–µ—á–æ—Ä–∞!",
        "image": "https://i.ibb.co/sdDmQmqN/photo-2025-04-15-15-08-20-2.jpg"
    },
    "11": {
        "name": "–ö—Ä–µ–º Enchanted Velvet ‚ú®",
        "description": "üíé **Enchanted Velvet** ‚Äì –≤—ñ–¥—á—É–π—Ç–µ –º–∞–≥—ñ—é –¥–æ–≥–ª—è–¥—É –∑ –∫—Ä–µ–º–æ–º, —è–∫–∏–π –¥–∞—Ä—É—î —à–æ–≤–∫–æ–≤–∏—Å—Ç—É –º‚Äô—è–∫—ñ—Å—Ç—å —Ç–∞ —Å—è–π–≤–æ –≤–∞—à—ñ–π —à–∫—ñ—Ä—ñ!",
        "image": "https://i.ibb.co/KcNhVvK4/photo-2025-04-15-15-08-20.jpg"
    },
    "12": {
        "name": "–õ–æ—Å—å–π–æ–Ω Pure Elegance üí´",
        "description": "üå∏ **Pure Elegance** ‚Äì —ñ–¥–µ–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å –º—ñ–∂ –Ω—ñ–∂–Ω—ñ—Å—Ç—é —Ç–∞ –∂–∏–≤–ª–µ–Ω–Ω—è–º, —â–æ –∑–∞–±–µ–∑–ø–µ—á—É—î —Å–≤—ñ–∂—ñ—Å—Ç—å —ñ –Ω–µ–ø–æ–≤—Ç–æ—Ä–Ω—É –µ–ª–µ–≥–∞–Ω—Ç–Ω—ñ—Å—Ç—å!",
        "image": "https://i.ibb.co/Mx9J3CYN/photo-2025-04-15-15-08-19.jpg"
    },
    "13": {
        "name": "–ö—Ä–µ–º Opulent Glow üåü",
        "description": "üíê **Opulent Glow** ‚Äì –∫—Ä–µ–º, —â–æ –ø—ñ–¥–∫—Ä–µ—Å–ª—é—î –≤–∞—à—É –ø—Ä–∏—Ä–æ–¥–Ω—É –∫—Ä–∞—Å—É, –¥–∞—Ä—É—é—á–∏ –≥–ª–∏–±–æ–∫–µ –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è —Ç–∞ –µ—Ñ–µ–∫—Ç–Ω–∏–π –±–ª–∏—Å–∫!",
        "image": "https://i.ibb.co/r2J0CXgm/photo-2025-04-15-15-08-18-2.jpg"
    },
    "14": {
        "name": "–ö—Ä–µ–º Divine Nectar üçØ",
        "description": "üåπ **Divine Nectar** ‚Äì —Ä–æ–∑–∫—ñ—à–Ω–∏–π –∫—Ä–µ–º, –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω–∏–π –ø—Ä–∏—Ä–æ–¥–Ω–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –¥–ª—è –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–≥–æ –¥–æ–≥–ª—è–¥—É –∑–∞ —à–∫—ñ—Ä–æ—é!",
        "image": "https://i.ibb.co/cXtXDGWC/photo-2025-04-15-15-08-18.jpg"
    },
    "15": {
        "name": "–õ–æ—Å—å–π–æ–Ω Soft Whisper üå¨",
        "description": "üíñ **Soft Whisper** ‚Äì –ª–µ–≥–∫–∏–π –ª–æ—Å—å–π–æ–Ω, —â–æ –¥–∞—Ä—É—î —Å–≤—ñ–∂—ñ—Å—Ç—å —ñ –¥–µ–ª—ñ–∫–∞—Ç–Ω–∏–π –∞—Ä–æ–º–∞—Ç, —è–∫ —Ç–∏—Ö–∏–π —à–µ–ø—ñ—Ç –≤–µ—Å–Ω–∏!",
        "image": "https://i.ibb.co/b4y9SHy/photo-2025-04-15-15-08-17.jpg"
    },
    "16": {
        "name": "–ö—Ä–µ–º Radiant Charm ‚ú®",
        "description": "üåü **Radiant Charm** ‚Äì –∫—Ä–µ–º –¥–ª—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è, —è–∫–∏–π –¥–∞—Ä—É—î –≤–∞—à—ñ–π —à–∫—ñ—Ä—ñ –Ω–µ–π–º–æ–≤—ñ—Ä–Ω–µ —Å—è–π–≤–æ —Ç–∞ —á–∞—Ä—ñ–≤–Ω—ñ—Å—Ç—å!",
        "image": "https://i.ibb.co/KcGGjcHs/photo-2025-04-15-15-12-19-2.jpg"
    },
    "17": {
        "name": "–ö—Ä–µ–º Secret Allure üíé",
        "description": "üå∫ **Secret Allure** ‚Äì –≤–∏—Ç–æ–Ω—á–µ–Ω–∏–π –∫—Ä–µ–º, —è–∫–∏–π –ø—ñ–¥–∫—Ä–µ—Å–ª—é—î –≤–∞—à—É —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ—Å—Ç—å —Ç–∞ –¥–æ–¥–∞—î –º–∞–≥–Ω–µ—Ç–∏–∑–º—É –∑–æ–≤–Ω—ñ—à–Ω–æ—Å—Ç—ñ!",
        "image": "https://i.ibb.co/4whM3CBj/photo-2025-04-15-15-12-19.jpg"
    },
    "18": {
        "name": "–õ–æ—Å—å–π–æ–Ω Satin Bliss üåº",
        "description": "üå∑ **Satin Bliss** ‚Äì –Ω—ñ–∂–Ω–∏–π –ª–æ—Å—å–π–æ–Ω, —â–æ –∑–∞–±–µ–∑–ø–µ—á—É—î –¥–æ–≥–ª—è–Ω—É—Ç–æ—Å—Ç—å —à–∫—ñ—Ä–∏ —ñ –¥–∞—Ä—É—î –≤—ñ–¥—á—É—Ç—Ç—è —à–æ–≤–∫–æ–≤–∏—Å—Ç–æ—ó —Ä–æ–∑–∫–æ—à—ñ!",
        "image": "https://i.ibb.co/ccfr76k4/photo-2025-04-15-15-12-18-2.jpg"
    },
    "19": {
        "name": "–ù–µ–±–µ—Å–Ω–∏–π –∫—Ä–µ–º Celestial üí´",
        "description": "üíê **Celestial** ‚Äì –∫—Ä–µ–º, —â–æ –¥–∞—Ä—É—î –Ω–µ–∑–µ–º–Ω—É –ª–µ–≥–∫—ñ—Å—Ç—å, –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è —Ç–∞ —Å—è–π–≤–æ, —Å—Ç–≤–æ—Ä—é—é—á–∏ –≤—ñ–¥—á—É—Ç—Ç—è —á–∏—Å—Ç–æ—Ç–∏ –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è!",
        "image": "https://i.ibb.co/0yJxwb5b/photo-2025-04-15-15-12-18.jpg"
    },
    "20": {
        "name": "–ö—Ä–µ–º Orchid Dream üå∏",
        "description": "‚ú® **Orchid Dream** ‚Äì –Ω–∞—Å–∏—á–µ–Ω–∏–π –∫—Ä–µ–º –∑ –¥–µ–ª—ñ–∫–∞—Ç–Ω–∏–º –∞—Ä–æ–º–∞—Ç–æ–º –æ—Ä—Ö—ñ–¥–µ—ó –¥–ª—è –Ω—ñ–∂–Ω–æ–≥–æ —Ç–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–≥–ª—è–¥—É!",
        "image": "https://i.ibb.co/qvTCHVV/photo-2025-04-15-15-12-17.jpg"
    },
    "21": {
        "name": "–õ–æ—Å—å–π–æ–Ω Serene Touch üåπ",
        "description": "üíñ **Serene Touch** ‚Äì –ª–æ—Å—å–π–æ–Ω, —â–æ –¥–∞—Ä—É—î —Å–ø–æ–∫—ñ–π —Ç–∞ —Å–≤—ñ–∂—ñ—Å—Ç—å, –∑–±–∞–≥–∞—á—É—é—á–∏ —à–∫—ñ—Ä—É –≤—ñ—Ç–∞–º—ñ–Ω–∞–º–∏ —Ç–∞ –∑–≤–æ–ª–æ–∂–µ–Ω–Ω—è–º!",
        "image": "https://i.ibb.co/nMb7BfJb/photo-2025-04-15-15-12-16-2.jpg"
    },
    "22": {
        "name": "–ö—Ä–µ–º Mystical Silk ‚ú®",
        "description": "üåü **Mystical Silk** ‚Äì –∫—Ä–µ–º –¥–ª—è –≤–∏—Ç–æ–Ω—á–µ–Ω–æ—ó —à–∫—ñ—Ä–∏, —â–æ –¥–∞—Ä—É—î —Ä–æ–∑–∫—ñ—à–Ω—É –≥–ª–∞–¥–∫—ñ—Å—Ç—å —Ç–∞ –Ω–µ–∑–∞–±—É—Ç–Ω—ñ–π –∞—Ä–æ–º–∞—Ç!",
        "image": "https://i.ibb.co/bMcQSsLv/photo-2025-04-15-15-12-16.jpg"
    },
    "23": {
        "name": "–ö—Ä–µ–º Eternal Grace üí´",
        "description": "üíé **Eternal Grace** ‚Äì –∫—Ä–µ–º, —è–∫–∏–π –ø–æ—î–¥–Ω—É—î —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω–µ –∂–∏–≤–ª–µ–Ω–Ω—è –∑ –µ–ª–µ–≥–∞–Ω—Ç–Ω—ñ—Å—Ç—é, –∑–∞–ª–∏—à–∞—é—á–∏ —à–∫—ñ—Ä—É –Ω–µ–π–º–æ–≤—ñ—Ä–Ω–æ –º‚Äô—è–∫–æ—é!",
        "image": "https://i.ibb.co/N2rqMnHr/photo-2025-04-15-15-12-15.jpg"
    },
    "24": {
        "name": "–ö—Ä–µ–º Velvet Enigma üåô",
        "description": "üåπ **Velvet Enigma** ‚Äì —Ä–æ–∑–∫—ñ—à–Ω–∏–π –∫—Ä–µ–º, —â–æ –æ–∫—É—Ç—É—î —à–∫—ñ—Ä—É —Ç–∞—î–º–Ω–∏—á–æ—é –Ω—ñ–∂–Ω—ñ—Å—Ç—é, –¥–∞—Ä—É—é—á–∏ –Ω–µ–ø–æ–≤—Ç–æ—Ä–Ω–µ —Å—è–π–≤–æ!",
        "image": "https://i.ibb.co/YFFmL2WZ/photo-2025-04-15-15-12-14.jpg"
    },
}

# ------------------------- –§—É–Ω–∫—Ü–∏–∏ Conversation -------------------------

def start(update: Update, context: CallbackContext) -> int:
    """
    –í—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ 24 –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤.
    """
    chat_id = update.effective_chat.id
    welcome_text = (
        "üåü –í—ñ—Ç–∞—î–º–æ —É —Å–≤—ñ—Ç—ñ —Ä–æ–∑–∫–æ—à—ñ —Ç–∞ –∫—Ä–∞—Å–∏ Victoria's Secret! üåü\n\n"
        "–¢—É—Ç –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ –ø–∞—Ä—Ñ—É–º–æ–≤–∞–Ω—ñ –ª–æ—Å—å–π–æ–Ω–∏ —Ç–∞ –∫—Ä–µ–º–∏ –∑ –°–®–ê, —è–∫—ñ –¥–∞—Ä—É—é—Ç—å –Ω–µ–ø–æ–≤—Ç–æ—Ä–Ω—ñ –≤—ñ–¥—á—É—Ç—Ç—è —Ç–∞ –¥–æ–≥–ª—è–¥ –∑–∞ —à–∫—ñ—Ä–æ—é.\n"
        "–û–±–∏—Ä–∞–π—Ç–µ —Ç–æ–≤–∞—Ä, —è–∫–∏–π –≤–∞–º –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è, —Ç–∞ –¥—ñ–∑–Ω–∞–π—Ç–µ—Å—è –±—ñ–ª—å—à–µ! üíñ"
    )

    buttons = []
    row = []
    # –°–æ–∑–¥–∞—ë–º 24 –∫–Ω–æ–ø–∫–∏ (3 –≤ —Ä—è–¥)
    for idx, prod_id in enumerate(products.keys(), start=1):
        product_title = products[prod_id]["name"]
        btn = InlineKeyboardButton(text=product_title, callback_data=f"PRODUCT_{prod_id}")
        row.append(btn)
        if idx % 3 == 0:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    reply_markup = InlineKeyboardMarkup(buttons)
    
    welcome_image = "https://i.ibb.co/cS9WCwrJ/photo-2025-04-14-01-23-29.jpg"
    context.bot.send_photo(
        chat_id=chat_id, 
        photo=welcome_image, 
        caption=welcome_text,
        reply_markup=reply_markup
    )
    return CHOOSING_PRODUCT


def select_product(update: Update, context: CallbackContext) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –ø–æ –∫–Ω–æ–ø–∫–µ "PRODUCT_{id}" –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–º–æ–≤–∏—Ç–∏ üõç".
    """
    query = update.callback_query
    query.answer()

    data = query.data
    if data.startswith("PRODUCT_"):
        prod_id = data.split("_")[1]
        if prod_id not in products:
            query.edit_message_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return CHOOSING_PRODUCT

        context.user_data["selected_product_id"] = prod_id
        product = products[prod_id]
        caption_text = (
            f"üõç **{product['name']}**\n\n"
            f"{product['description']}\n\n"
            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ó–∞–º–æ–≤–∏—Ç–∏ üõç¬ª, —â–æ–± –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!"
        )

        keyboard = [
            [InlineKeyboardButton("–ó–∞–º–æ–≤–∏—Ç–∏ üõç", callback_data=f"ORDER_{prod_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        chat_id = query.message.chat_id
        context.bot.send_photo(
            chat_id=chat_id,
            photo=product["image"],
            caption=caption_text,
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
        return CHOOSING_PRODUCT
    else:
        query.edit_message_text("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.")
        return CHOOSING_PRODUCT


def order_product(update: Update, context: CallbackContext) -> int:
    """
    –ü—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ "–ó–∞–º–æ–≤–∏—Ç–∏ üõç" –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∏–º—è.
    """
    query = update.callback_query
    query.answer()

    data = query.data
    if data.startswith("ORDER_"):
        prod_id = data.split("_")[1]
        context.user_data["selected_product_id"] = prod_id
        try:
            query.edit_message_reply_markup(reply_markup=None)
        except Exception:
            pass

        phone_request = (
            "üì± –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à **–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É** —Ç–∞ **—ñ–º'—è**.\n\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: `+380 99 123 45 67, –û–ª–µ–Ω–∞`"
        )
        context.bot.send_message(
            chat_id=query.message.chat_id,
            text=phone_request,
            parse_mode="Markdown"
        )
        return WAITING_PHONE_NAME
    else:
        query.edit_message_text("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.")
        return CHOOSING_PRODUCT


def get_phone_name(update: Update, context: CallbackContext) -> int:
    """
    –ü–æ–ª—É—á–∞–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∏–º—è, –∑–∞—Ç–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.
    """
    user_input = update.message.text.strip()
    context.user_data["phone_name"] = user_input

    address_request = (
        "üìç –í–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç —Ç–∞ –æ–±–ª–∞—Å—Ç—å.\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ö–∏—ó–≤, –ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å\n\n"
        "üè§ –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏ –∞–±–æ –£–∫—Ä–ø–æ—à—Ç–∏.\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ù–æ–≤–∞ –ü–æ—à—Ç–∞, –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è ‚Ññ42"
    )
    update.message.reply_text(address_request, parse_mode="Markdown")
    return WAITING_ADDRESS


def get_address(update: Update, context: CallbackContext) -> int:
    """
    –ü–æ–ª—É—á–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–∞—Å. –ø—É–Ω–∫—Ç, –æ–±–ª–∞—Å—Ç—å —Ç–∞ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è).
    –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞.
    """
    user_input = update.message.text.strip()
    context.user_data["address"] = user_input

    prod_id = context.user_data.get("selected_product_id")
    product = products.get(prod_id)
    if not product:
        update.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑ –ø—Ä–æ–¥—É–∫—Ç–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")
        return ConversationHandler.END

    phone_name = context.user_data.get("phone_name", "")
    address = context.user_data.get("address", "")

    summary_text = (
        f"üõç **{product['name']}**\n\n"
        f"{product['description']}\n\n"
        "**–í–∞—à—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:**\n"
        f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω —ñ —ñ–º'—è: {phone_name}\n"
        f"‚Ä¢ –ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {address}\n\n"
        "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—ñ –¥–∞–Ω—ñ. –Ø–∫—â–æ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äì –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ ‚úÖ¬ª. "
        "–Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–°–∫–∞—Å—É–≤–∞—Ç–∏ ‚ùå¬ª."
    )

    keyboard = [
        [
            InlineKeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ ‚úÖ", callback_data="CONFIRM_ORDER"),
            InlineKeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏ ‚ùå", callback_data="CANCEL_ORDER")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_photo(
        photo=product["image"],
        caption=summary_text,
        parse_mode="Markdown",
        reply_markup=reply_markup
    )
    return CONFIRM_ORDER


def confirm_order(update: Update, context: CallbackContext) -> int:
    """
    –ü—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Äì –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É (–∑ —Ñ–æ—Ç–æ) —ñ –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    query = update.callback_query
    query.answer()

    user_data = context.user_data
    prod_id = user_data.get("selected_product_id")
    product = products.get(prod_id, {})
    phone_name = user_data.get("phone_name", "")
    address = user_data.get("address", "")

    user = update.effective_user
    full_name = user.full_name
    username = f"@{user.username}" if user.username else ""

    order_msg = (
        f"üõí **–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!**\n\n"
        f"**–¢–æ–≤–∞—Ä:** {product.get('name', '‚Äî')}\n"
        f"**–¢–µ–ª–µ—Ñ–æ–Ω —ñ —ñ–º'—è –ø–æ–∫—É–ø—Ü—è:** {phone_name}\n"
        f"**–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:** {address}\n\n"
        f"**–ü–æ–∫—É–ø–µ—Ü—å:** {full_name} {username}\n"
        f"ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user.id}\n"
    )
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É —Ñ–æ—Ç–æ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞
        context.bot.send_photo(
            chat_id=OWNER_ID,
            photo=product.get("image"),
            caption=order_msg,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

    try:
        query.edit_message_caption(
            caption="‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –æ–±—Ä–æ–±—Ü—ñ. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫.",
            parse_mode="Markdown",
            reply_markup=None
        )
    except Exception:
        context.bot.send_message(
            chat_id=query.message.chat_id,
            text="‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –æ–±—Ä–æ–±—Ü—ñ. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫."
        )
    context.user_data.clear()
    return ConversationHandler.END


def cancel_order(update: Update, context: CallbackContext) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°–∫–∞—Å—É–≤–∞—Ç–∏ ‚ùå".
    """
    query = update.callback_query
    query.answer()
    try:
        query.edit_message_caption(
            caption="‚ùå –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
            reply_markup=None
        )
    except Exception:
        context.bot.send_message(
            chat_id=query.message.chat_id,
            text="‚ùå –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ."
        )
    context.user_data.clear()
    return ConversationHandler.END


def cancel_command(update: Update, context: CallbackContext) -> int:
    """
    –ö–æ–º–∞–Ω–¥–∞ /cancel –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞.
    """
    update.message.reply_text("‚ùå –í–∏ —Å–∫–∞—Å—É–≤–∞–ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.", reply_markup=ReplyKeyboardRemove())
    context.user_data.clear()
    return ConversationHandler.END


# ------------------------- –ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥—ã -------------------------

def admin_help(update: Update, context: CallbackContext):
    user = update.effective_user
    if user.id != OWNER_ID:
        update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤.")
        return
    text = (
        "–ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏:\n"
        "/help ‚Äì –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –º–µ–Ω—é.\n"
        "/send_to_channel <—Ç–µ–∫—Å—Ç> ‚Äì –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª.\n"
        "/cancel ‚Äì —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –¥—ñ–∞–ª–æ–≥ (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á).\n"
    )
    update.message.reply_text(text)


def send_to_channel(update: Update, context: CallbackContext):
    user = update.effective_user
    if user.id != OWNER_ID:
        update.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤.")
        return
    if not context.args:
        update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /send_to_channel")
        return
    message_text = " ".join(context.args)
    button = InlineKeyboardButton("–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è ‚û°Ô∏è", url="https://t.me/YOUR_BOT_USERNAME")
    markup = InlineKeyboardMarkup([[button]])
    try:
        context.bot.send_message(chat_id=CHANNEL_ID, text=message_text, reply_markup=markup)
        update.message.reply_text("üì¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–µ –≤ –∫–∞–Ω–∞–ª!")
    except Exception as e:
        logger.error(e)
        update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª.")


# ------------------------- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ -------------------------

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_PRODUCT: [
                CallbackQueryHandler(select_product, pattern=r"^PRODUCT_\d+$"),
                CallbackQueryHandler(order_product, pattern=r"^ORDER_\d+$"),
            ],
            WAITING_PHONE_NAME: [
                MessageHandler(Filters.text & ~Filters.command, get_phone_name)
            ],
            WAITING_ADDRESS: [
                MessageHandler(Filters.text & ~Filters.command, get_address)
            ],
            CONFIRM_ORDER: [
                CallbackQueryHandler(confirm_order, pattern="^CONFIRM_ORDER$"),
                CallbackQueryHandler(cancel_order, pattern="^CANCEL_ORDER$")
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel_command)],
        allow_reentry=True
    )
    dp.add_handler(conv_handler)
    dp.add_handler(CommandHandler("help", admin_help))
    dp.add_handler(CommandHandler("send_to_channel", send_to_channel, pass_args=True))

    updater.start_polling()
    logger.info("Bot started successfully!")
    updater.idle()


if __name__ == "__main__":
    main()
